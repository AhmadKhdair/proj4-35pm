#include <stdio.h>
#include <malloc.h>
#include <string.h>
struct node{
    int taskID;
    char taskName[50];
    char taskDate[12];
    double taskDuration;
    struct node* Next;
};
// Function For Stacks :
int isEmpty(struct node* S);
struct node* createStack( );
void Pop(struct node* S);
void makeStackEmpty( struct node* S );
struct node* Top(struct node* S);
void Push(struct node* newNode,struct node* S);
void DisposeStack( struct node* S );
int size(struct node* S);
void reverseList(struct node* S);
struct node* copyStack(struct node* S);
void printStack(struct node* S);




//  Function For LinkedList
void printMenu();
struct node* makeEmpty(struct node* L);
void loadTasksFile(struct node*);
void insert(int X,struct node* L,struct node* P);
void insertFirst(int X,struct node* L);
void removeNodeTask(struct node* P,struct node*L);
void addNode(struct node* newNode,struct node* L);
void insertLast(int X,struct node* L);
struct node* findById(int X,struct node* L);
struct node* makeNode(int taskID,char taskName[100],char taskDate[20],double taskDuration);

//struct node* findByName(char[] str,struct node* L);

struct node* searchByID(int taskID,struct node* L);
struct node* searchByName(char taskName[50],struct node* L);
struct node* findPrevious(int X,struct node* L);
int isLast(struct node* P,struct node* L);
void removeTask(int X,struct node* L);
void deleteFirst(struct node* L);
void performATask(struct node* task, struct node* L,struct node* S);
void deleteLast(struct node* L);
void printList(struct node* L);
int isEmpty(struct node* L);
void deleteList(struct node* L);
int size(struct node* L);
struct node* copyList(struct node* L);
struct node* getNth(int N, struct node* L); // to return The Nth Node ( return a pointer at it)
struct node* getLast(struct node* L); // return the last node
void concatList(struct node * firstList, struct node * secondList);
struct node* findMiddle(struct node* L);
void linkedListToArray(struct node* L,int arr[]);
void arrayToLinkedList(int arr[],struct node* L);
void merge(int arr[], int left, int mid, int right);
void mergeSort(int arr[], int left, int right);
void reverseList(struct node* L);
int main() {
struct node* L = NULL;
struct node* S=NULL;
    L = makeEmpty(L);
    S=createStack();
    int choice, taskID,searchType;
    char taskName[100], taskDate[20];
    double taskDuration;
    printf("\nWelcome To Task Management System\n");
    do{
        printMenu();
        scanf("%d",&choice);
        switch (choice) {
            case 1:
                loadTasksFile(L);
                printf("\nThe Task has been successfully loaded");
                break;
            case 2:
                printf("\nEnter Task ID: ");
                scanf("%d", &taskID);
                printf("\nEnter Task Name: ");
                scanf("%s", taskName);
                printf("\nEnter Task Date (DD/MM/YYYY): ");
                scanf("%s", taskDate);
                printf("\nEnter Task Duration: ");
                scanf("%lf", &taskDuration);
                addNode(makeNode(taskID,taskName,taskDate,taskDuration),L);
                printf("\nTask with ID : %d  has been successfully added",taskID);
                break;

            case 3:
                printf("\nEnter Task ID To Delete It: ");
                scanf("%d", &taskID);
                removeTask(taskID,L);
                printf("\nTask with ID : %d  has been successfully deleted",taskID);
                break;

            case 4:
                printf("\n Two Types of Search, Please Choose One :");
                printf("\n1. Search For A Task By Task ID");
                printf("\n2. Search For A Task By Task Name");
                scanf("%d",&searchType);
                if(searchType==1){
                    struct node* searchedTask;
                    printf("Enter Task ID: ");
                    scanf("%d",&taskID);
                    searchedTask= searchByID(taskID,L);
                    if(searchedTask==NULL)
                        printf("Sorry, No Task With ID :%d",taskID);
                    else{
                        printf("Data Of Found Task : [%d#%s#%s#%lf]",searchedTask->taskID,searchedTask->taskName,searchedTask->taskDate,searchedTask->taskDuration);

                    }
                }
                else if(searchType==2) {
                    struct node *searchedTask;
                    printf("Enter Task Name: ");
                    scanf("%s", taskName);
                    searchedTask = searchByName(taskName, L);
                    if (searchedTask == NULL)
                        printf("Sorry, No Task With Name :%s", taskName);
                    else {
                        printf("Data Of Found Task : [%d#%s#%s#%lf]", searchedTask->taskID, searchedTask->taskName,
                               searchedTask->taskDate, searchedTask->taskDuration);
                    }
                }
                else{
                    printf("Invalid Type .");
                    NULL;
                }
                break;
            case 5:
                printList(L);
                break;
            case 6:
                printf("Enter Task ID: ");
                scanf("%d",&taskID);
                struct node* taskPerformed= searchByID(taskID,L);
                if(taskPerformed!=NULL){
                    performATask(taskPerformed,L,S);
                }
                else
                    printf("No Task With ID: %d To be performed",taskID);
                break;
            case 7:
                printStack(S);
        }
    }while (choice!=10);
    printList(L);
    return 0;
}

    void printMenu(){
        printf("Choose One Of These Options \n");
        printf("1. Load Tasks Fil\n");
        printf("2. Add a New Task\n");
        printf("3. Delete a Task\n");
        printf("4. Search for a Task\n");
        printf("5. View Unperformed Tasks\n");
        printf("6. Perform a Task\n");
        printf("7. Undo Last Performed Task\n");
        printf("8. View Performed Tasks\n");
        printf("9.Generate Summary Report\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");


    }
    struct node* makeEmpty(struct node* L){
        if(L!=NULL){
            deleteList(L);
        }
        L=(struct node*)malloc(sizeof (struct node));
        if(L==NULL){
            printf("out of memory");
            return NULL;
        }

        L->Next = NULL;
        return L;
    }

    void loadTasksFile(struct node* L){
        FILE *file= fopen("C:\\Users\\HP\\Desktop\\untitled3\\tasks.txt","r");
        if(file==NULL){
            printf("Error opening file.\n");
            return;
        }
        int taskID;
        char taskName[50];
        char taskDate[12];
        double taskDuration;
        while(fscanf(file,"%d#%[^#]#%[^#]#%lf",&taskID,taskName,taskDate,&taskDuration)==4){
            struct node* temp=findPrevious(taskID,L);
            if( isLast(temp,L) )
            addNode(makeNode(taskID,taskName,taskDate,taskDuration),L);
            //printf("TaskID: %d, TaskName: %s, TaskDate: %s, TaskDuration: %lf\n", taskID, taskName, taskDate, taskDuration);
        }
        fclose(file);
    }
    struct node* makeNode(int taskID,char taskName[100],char taskDate[20],double taskDuration){
        struct node* new=(struct node*) malloc(sizeof(struct node));
        if(new==NULL){
            printf("out of memory");
            return NULL;
        }
        new->taskID=taskID;
        strcpy(new->taskName,taskName);
        strcpy(new->taskDate,taskDate);
        new->taskDuration=taskDuration;
        new->Next=NULL;
        return new;
    }



    int isLast(struct node* P,struct node* L){
        return (P!=NULL && P->Next==NULL);
    }


    int isEmpty(struct node* L){
        return (L!=NULL && L->Next==NULL);
    }


    void insert(int X,struct node* L,struct node* P){
        struct node* temp=(struct node*)malloc(sizeof(struct node));
        temp->taskID=X;
        temp->Next=P->Next;
        P->Next=temp;
    }

    void insertNode(struct node* newNode,struct node* L,struct node* P){
        if(P!=NULL&&newNode!=NULL){
        newNode->Next=P->Next;
        P->Next=newNode;
        }
        else
            printf("Error At InsertNode");
    }

    void addNode(struct node* newNode,struct node* L){
             newNode->Next=L->Next;
             L->Next=newNode;
    }

    void insertFirst(int X,struct node* L){
        insert(X,L,L);
    }

    void insertLast(int X,struct node* L){

        struct node* temp=(struct node*) malloc(sizeof(struct node));

        if(temp==NULL){
            printf("out of memory, InsertLast Function");
            return;
        }

        temp->taskID=X;
        temp->Next=NULL;

        if(L->Next==NULL) // if the list is empty
            L->Next=temp;

        else{
            struct node* P=L->Next;
            while(P->Next != NULL)
                P=P->Next;
            P->Next=temp;
        }

    }

    struct node* searchByID(int taskID,struct node* L){
        struct node* P;
        if(L==NULL){
            printf("invalid Header !!");
            return NULL;
        }
        P=L->Next;
        if(P==NULL){
            printf("empty list, P == NULL at Find Function");
            return NULL;
        }
        while(P!=NULL && P->taskID!=taskID)
            P= P->Next;

        return P;
    }

    struct node* searchByName(char taskName[50],struct node* L){
        struct node* P;
        if(L==NULL){
            printf("invalid Header !!");
            return NULL;
        }
        P=L->Next;
        if(P==NULL){
            printf("empty list, P == NULL at Find Function");
            return NULL;
        }
        while(P!=NULL && strcmp(P->taskName,taskName)!=0) // here i check each task name, by using strcmp func , it returns 0 if its equal , no need to check if p!=NULL cause i already check it
            P= P->Next;

        return P;
    }


    struct node* findPrevious(int X,struct node* L){
        struct node* P=L;
        if(P==NULL){
            printf("Error, P == NULL at Find Previous Function, the return of the function is : NULL");
            return NULL;
        }
        while(P->Next!=NULL && P->Next->taskID != X)
            P=P->Next;
        return P;
    }


    void removeTask(int X,struct node* L){
        struct node* P= findPrevious(X,L);
        struct node* tempForNodeWant2Free;
        if(!isLast(P,L)){
            tempForNodeWant2Free=P->Next;
            P->Next=P->Next->Next;
            free(tempForNodeWant2Free);
        }
        else{
            printf("Sorry, No Task With This ID");
        }
    }

    void deleteFirst(struct node* L){
        if(L!=NULL && L->Next!=NULL){
            struct node* wantToDelete=L->Next;
            L->Next=wantToDelete->Next;
            free(wantToDelete);
        }
        else
            printf("Empty List , Delete First Function  ");
    }
    void deleteLast(struct node* L){
        struct node* p=L;
        while(L!=NULL &&p->Next->Next!=NULL){
            p=p->Next;
        }
        struct node* temp=p->Next;
        p->Next=NULL;
        free(temp);
    }
    void deleteList(struct node* L){
        struct node* temp;
        struct node* P=L->Next;
        L->Next= NULL;

        while(P!=NULL){
            temp=P->Next;
            free(P);
            P=temp;
        }
    }


    void printList(struct node* L){
        struct node* P=L->Next;
        if(P==NULL){
            printf("Empty List");
        }
        else{
            printf("L -> Head-> ");
            while(P!=NULL){
                printf(" [ %d#%s#%s#%lf | -]-->",P->taskID,P->taskName,P->taskDate,P->taskDuration);
                P=P->Next;
            }
            printf(" NULL");
        }
    }

    void performATask(struct node* task, struct node* L,struct node* S){
    struct node* temp=(struct node*) malloc(sizeof(struct node));
    temp->taskID=task->taskID;
    strcmp(temp->taskName,task->taskName);
    strcmp(temp->taskDate,task->taskDate);
    temp->taskDuration=task->taskDuration;
        Push(temp,S);
        removeNodeTask(task,L);
    }

    void removeNodeTask(struct node* P,struct node*L){
        struct node* temp= findPrevious(P->taskID,L);
        temp->Next=P->Next;
        free(P);
    }

    int size(struct node* L){
        struct node* P=L->Next;
        int sizeCounter=0;
        while(P!=NULL){
            sizeCounter++;
            P=P->Next;
        }
        return sizeCounter;
    }



    struct node* copyList(struct node* L) {
        if (L == NULL) {
            return NULL;
        }

        struct node* copyList =NULL;
        copyList= makeEmpty(copyList);;

        struct node* currentOriginal = L->Next;
        struct node* currentCopy = copyList;

        while (currentOriginal != NULL) {
            struct node* newNode = (struct node*)malloc(sizeof(struct node));
            newNode->taskID = currentOriginal->taskID;
            newNode->Next = NULL;

            currentCopy->Next = newNode;
            currentCopy = newNode;

            currentOriginal = currentOriginal->Next;
        }

        return copyList;
    }
    struct node* getNth(int N, struct node* L) {
        struct node* current = L->Next;
        int count = 0;

        while (current != NULL) {
            if (count == N) {
                return current;
            }
            count++;
            current = current->Next;
        }

        return NULL;
    }

    struct node* getLast(struct node* L) {
        struct node* current = L->Next;

        while (current != NULL && current->Next != NULL) {
            current = current->Next;
        }

        return current;
    }

    void  concatList(struct node * firstList, struct node * secondList){
            struct node *p = firstList;
            while (p->Next != NULL){
                p = p->Next;            // to arrive to the last node
            }
            p->Next = secondList->Next;

             // second = NULL; if i want to disable the second list after i concated it with first list
        }
    struct node* findMiddle(struct node* L) {

        int middleIndex=size(L)/2;
        int counter=0;
        struct node* p=L->Next;
        while(p!=NULL){
            if(counter==middleIndex)
                return p;
                p=p->Next;
                counter++;
        }
        return NULL; // if everything work good, we are not arrive to this case.
    }
    void linkedListToArray(struct node* L,int arr[]){
        int i=0;
        struct node* p=L->Next;
        while(p!=NULL){
            arr[i]=p->taskID;
            p=p->Next;
            i++;
        }
    }
    void arrayToLinkedList(int arr[],struct node* L){
        struct node* p=L->Next;
        int i=0;
        while(p!=NULL){
            p->taskID=arr[i];
            i++;
            p=p->Next;
        }
    }
    void merge(int arr[], int left, int mid, int right) {
        int i, j, k;
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int leftArr[n1], rightArr[n2];

        for (i = 0; i < n1; i++)
            leftArr[i] = arr[left + i];
        for (j = 0; j < n2; j++)
            rightArr[j] = arr[mid + 1 + j];

        i = 0;
        j = 0;
        k = left;
        while (i < n1 && j < n2) {
            if (leftArr[i] <= rightArr[j]) {
                arr[k] = leftArr[i];
                i++;
            }
            else {
                arr[k] = rightArr[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = leftArr[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = rightArr[j];
            j++;
            k++;
        }
    }
    void mergeSort(int arr[], int left, int right) {
        if (left < right) {
            int mid = left + (right - left) / 2;
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);
            merge(arr, left, mid, right);
        }
    }

void reverseList(struct node* L) {
    struct node* current = L->Next;
    struct node* next = NULL;
    struct node* temp = NULL;

    while (current != NULL) {
        next = current->Next;
        current->Next = temp;
        temp = current;
        current = next;
    }

    L->Next = temp;  // to let the head pointer at the last node which it convert to the first one
}

struct node* createStack( ){
    struct node* S;
    S = (struct node*)malloc( sizeof( struct node ) );
    if( S == NULL )
        printf( "Out of space!" );
    S->Next = NULL;
    makeStackEmpty( S );
    return S;
}

void Pop(struct node* S){
    if(isEmpty(S))
        printf("Empty Stack");
    else{
        struct node* temp=S->Next;
        S->Next=temp->Next;
        free(temp);
    }
}
void makeStackEmpty( struct node* S ){
    if( S == NULL )
        printf( "Out of space!" );
    else
        while( !isEmpty( S ))
            Pop( S );
}

struct node* Top(struct node* S){
    if(!isEmpty(S))
        return S->Next;
    printf("Empty Stack");
    return 0;
}

void Push(struct node* newNode,struct node* S){
        newNode->Next=S->Next;
        S->Next=newNode;
}

void DisposeStack( struct node* S ){
    makeStackEmpty( S );
    free( S );
}
/*
struct node* copyStack(struct node* S) {
    struct node* newStack = createStack();
    struct node* temp = S->Next;
    while (temp != NULL) {
        Push(temp->data, newStack);
        temp = temp->Next;
    }
    return newStack;
}*/

void printStack(struct node* S){
    if(S!=NULL&&S->Next!=NULL){
    struct node* temp = S->Next;
    printf("TOP=S [  |-]-> ");
    while (temp != NULL) {
        printf("[%d#%s#%s#%d |-]-> ", temp->taskID,temp->taskName,temp->taskDate,temp->taskDuration);
        temp = temp->Next;
    }
    }
    printf("NULL\n");
}
